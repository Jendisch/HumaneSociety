#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Humane_Society
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Humane_Society")]
	public partial class LINQtoSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTrait(Trait instance);
    partial void UpdateTrait(Trait instance);
    partial void DeleteTrait(Trait instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertHealth(Health instance);
    partial void UpdateHealth(Health instance);
    partial void DeleteHealth(Health instance);
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    #endregion
		
		public LINQtoSQLDataContext() : 
				base(global::Humane_Society.Properties.Settings.Default.Humane_SocietyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQtoSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Trait> Traits
		{
			get
			{
				return this.GetTable<Trait>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Health> Healths
		{
			get
			{
				return this.GetTable<Health>();
			}
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Traits")]
	public partial class Trait : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _traitId;
		
		private string _size;
		
		private string _activityLevel;
		
		private string _color;
		
		private System.Nullable<int> _animalId;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntraitIdChanging(int value);
    partial void OntraitIdChanged();
    partial void OnsizeChanging(string value);
    partial void OnsizeChanged();
    partial void OnactivityLevelChanging(string value);
    partial void OnactivityLevelChanged();
    partial void OncolorChanging(string value);
    partial void OncolorChanged();
    partial void OnanimalIdChanging(System.Nullable<int> value);
    partial void OnanimalIdChanged();
    #endregion
		
		public Trait()
		{
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_traitId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int traitId
		{
			get
			{
				return this._traitId;
			}
			set
			{
				if ((this._traitId != value))
				{
					this.OntraitIdChanging(value);
					this.SendPropertyChanging();
					this._traitId = value;
					this.SendPropertyChanged("traitId");
					this.OntraitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="VarChar(MAX)")]
		public string size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activityLevel", DbType="VarChar(MAX)")]
		public string activityLevel
		{
			get
			{
				return this._activityLevel;
			}
			set
			{
				if ((this._activityLevel != value))
				{
					this.OnactivityLevelChanging(value);
					this.SendPropertyChanging();
					this._activityLevel = value;
					this.SendPropertyChanged("activityLevel");
					this.OnactivityLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="VarChar(MAX)")]
		public string color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalId", DbType="Int")]
		public System.Nullable<int> animalId
		{
			get
			{
				return this._animalId;
			}
			set
			{
				if ((this._animalId != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanimalIdChanging(value);
					this.SendPropertyChanging();
					this._animalId = value;
					this.SendPropertyChanged("animalId");
					this.OnanimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Trait", Storage="_Animal", ThisKey="animalId", OtherKey="animalId", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Traits.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Traits.Add(this);
						this._animalId = value.animalId;
					}
					else
					{
						this._animalId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _roomId;
		
		private string _size;
		
		private System.Nullable<bool> _occupied;
		
		private System.Nullable<int> _animalId;
		
		private System.Nullable<int> _roomNumber;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnroomIdChanging(int value);
    partial void OnroomIdChanged();
    partial void OnsizeChanging(string value);
    partial void OnsizeChanged();
    partial void OnoccupiedChanging(System.Nullable<bool> value);
    partial void OnoccupiedChanged();
    partial void OnanimalIdChanging(System.Nullable<int> value);
    partial void OnanimalIdChanged();
    partial void OnroomNumberChanging(System.Nullable<int> value);
    partial void OnroomNumberChanged();
    #endregion
		
		public Room()
		{
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int roomId
		{
			get
			{
				return this._roomId;
			}
			set
			{
				if ((this._roomId != value))
				{
					this.OnroomIdChanging(value);
					this.SendPropertyChanging();
					this._roomId = value;
					this.SendPropertyChanged("roomId");
					this.OnroomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="VarChar(MAX)")]
		public string size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_occupied", DbType="Bit")]
		public System.Nullable<bool> occupied
		{
			get
			{
				return this._occupied;
			}
			set
			{
				if ((this._occupied != value))
				{
					this.OnoccupiedChanging(value);
					this.SendPropertyChanging();
					this._occupied = value;
					this.SendPropertyChanged("occupied");
					this.OnoccupiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalId", DbType="Int")]
		public System.Nullable<int> animalId
		{
			get
			{
				return this._animalId;
			}
			set
			{
				if ((this._animalId != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanimalIdChanging(value);
					this.SendPropertyChanging();
					this._animalId = value;
					this.SendPropertyChanged("animalId");
					this.OnanimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomNumber", DbType="Int")]
		public System.Nullable<int> roomNumber
		{
			get
			{
				return this._roomNumber;
			}
			set
			{
				if ((this._roomNumber != value))
				{
					this.OnroomNumberChanging(value);
					this.SendPropertyChanging();
					this._roomNumber = value;
					this.SendPropertyChanged("roomNumber");
					this.OnroomNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Room", Storage="_Animal", ThisKey="animalId", OtherKey="animalId", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._animalId = value.animalId;
					}
					else
					{
						this._animalId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Health")]
	public partial class Health : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _healthId;
		
		private System.Nullable<bool> _receivedShots;
		
		private System.Nullable<decimal> _foodConsumptionPerWeek;
		
		private System.Nullable<int> _animalId;
		
		private EntityRef<Animal> _Animal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnhealthIdChanging(int value);
    partial void OnhealthIdChanged();
    partial void OnreceivedShotsChanging(System.Nullable<bool> value);
    partial void OnreceivedShotsChanged();
    partial void OnfoodConsumptionPerWeekChanging(System.Nullable<decimal> value);
    partial void OnfoodConsumptionPerWeekChanged();
    partial void OnanimalIdChanging(System.Nullable<int> value);
    partial void OnanimalIdChanged();
    #endregion
		
		public Health()
		{
			this._Animal = default(EntityRef<Animal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_healthId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int healthId
		{
			get
			{
				return this._healthId;
			}
			set
			{
				if ((this._healthId != value))
				{
					this.OnhealthIdChanging(value);
					this.SendPropertyChanging();
					this._healthId = value;
					this.SendPropertyChanged("healthId");
					this.OnhealthIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_receivedShots", DbType="Bit")]
		public System.Nullable<bool> receivedShots
		{
			get
			{
				return this._receivedShots;
			}
			set
			{
				if ((this._receivedShots != value))
				{
					this.OnreceivedShotsChanging(value);
					this.SendPropertyChanging();
					this._receivedShots = value;
					this.SendPropertyChanged("receivedShots");
					this.OnreceivedShotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodConsumptionPerWeek", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> foodConsumptionPerWeek
		{
			get
			{
				return this._foodConsumptionPerWeek;
			}
			set
			{
				if ((this._foodConsumptionPerWeek != value))
				{
					this.OnfoodConsumptionPerWeekChanging(value);
					this.SendPropertyChanging();
					this._foodConsumptionPerWeek = value;
					this.SendPropertyChanged("foodConsumptionPerWeek");
					this.OnfoodConsumptionPerWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalId", DbType="Int")]
		public System.Nullable<int> animalId
		{
			get
			{
				return this._animalId;
			}
			set
			{
				if ((this._animalId != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanimalIdChanging(value);
					this.SendPropertyChanging();
					this._animalId = value;
					this.SendPropertyChanged("animalId");
					this.OnanimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Health", Storage="_Animal", ThisKey="animalId", OtherKey="animalId", IsForeignKey=true)]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Healths.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Healths.Add(this);
						this._animalId = value.animalId;
					}
					else
					{
						this._animalId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animal")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _animalId;
		
		private string _name;
		
		private string _breed;
		
		private System.Nullable<decimal> _age;
		
		private System.Nullable<double> _price;
		
		private System.Nullable<System.DateTime> _entryDate;
		
		private System.Nullable<bool> _adopted;
		
		private string _type;
		
		private EntitySet<Trait> _Traits;
		
		private EntitySet<Room> _Rooms;
		
		private EntitySet<Health> _Healths;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnanimalIdChanging(int value);
    partial void OnanimalIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnbreedChanging(string value);
    partial void OnbreedChanged();
    partial void OnageChanging(System.Nullable<decimal> value);
    partial void OnageChanged();
    partial void OnpriceChanging(System.Nullable<double> value);
    partial void OnpriceChanged();
    partial void OnentryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnentryDateChanged();
    partial void OnadoptedChanging(System.Nullable<bool> value);
    partial void OnadoptedChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
		
		public Animal()
		{
			this._Traits = new EntitySet<Trait>(new Action<Trait>(this.attach_Traits), new Action<Trait>(this.detach_Traits));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._Healths = new EntitySet<Health>(new Action<Health>(this.attach_Healths), new Action<Health>(this.detach_Healths));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_animalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int animalId
		{
			get
			{
				return this._animalId;
			}
			set
			{
				if ((this._animalId != value))
				{
					this.OnanimalIdChanging(value);
					this.SendPropertyChanging();
					this._animalId = value;
					this.SendPropertyChanged("animalId");
					this.OnanimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_breed", DbType="VarChar(MAX)")]
		public string breed
		{
			get
			{
				return this._breed;
			}
			set
			{
				if ((this._breed != value))
				{
					this.OnbreedChanging(value);
					this.SendPropertyChanging();
					this._breed = value;
					this.SendPropertyChanged("breed");
					this.OnbreedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float")]
		public System.Nullable<double> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> entryDate
		{
			get
			{
				return this._entryDate;
			}
			set
			{
				if ((this._entryDate != value))
				{
					this.OnentryDateChanging(value);
					this.SendPropertyChanging();
					this._entryDate = value;
					this.SendPropertyChanged("entryDate");
					this.OnentryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adopted", DbType="Bit")]
		public System.Nullable<bool> adopted
		{
			get
			{
				return this._adopted;
			}
			set
			{
				if ((this._adopted != value))
				{
					this.OnadoptedChanging(value);
					this.SendPropertyChanging();
					this._adopted = value;
					this.SendPropertyChanged("adopted");
					this.OnadoptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Trait", Storage="_Traits", ThisKey="animalId", OtherKey="animalId")]
		public EntitySet<Trait> Traits
		{
			get
			{
				return this._Traits;
			}
			set
			{
				this._Traits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Room", Storage="_Rooms", ThisKey="animalId", OtherKey="animalId")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Health", Storage="_Healths", ThisKey="animalId", OtherKey="animalId")]
		public EntitySet<Health> Healths
		{
			get
			{
				return this._Healths;
			}
			set
			{
				this._Healths.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Traits(Trait entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Traits(Trait entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Healths(Health entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Healths(Health entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
	}
}
#pragma warning restore 1591
